************************************************************************************Installation de la chaîne de Cross compilation***************************************************************************

1. Cross-compiling toolchain setup

Installer la chaîne de cross compilation proposé par le repository de ubuntu.
Le nom de la chaîne est gcc-arm-linux-gnueabi
Hint: sudo apt install nom-package                                                                 *********************************************************************************fait

sudo apt install gcc-arm-linux-gnueabi




2. Retrouver avec la commande dpkg -L le chemin d’accès au cross
compilateur et le nom de l’exécutable que vous allez utiliser pour cross
compiler vos programmes (suffix-gcc).ma
Hint : dpkg -L nom-package

Il faut etre dans le répertoire /uboot

git checkout v2018.05

essaid@ubuntu:~/Desktop/personal/labs/lab12/u-boot$ git checkout v2018.05
warning: refname 'v2018.05' is ambiguous.
Basculement sur la branche 'v2018.05'


dpkg -L gcc-arm-linux-gnueabi
/.
/usr
/usr/bin
/usr/share
/usr/share/doc
/usr/share/doc/cpp-arm-linux-gnueabi
/usr/share/man
/usr/share/man/man1
/usr/bin/arm-linux-gnueabi-gcc
/usr/bin/arm-linux-gnueabi-gcc-ar
/usr/bin/arm-linux-gnueabi-gcc-nm
/usr/bin/arm-linux-gnueabi-gcc-ranlib
/usr/bin/arm-linux-gnueabi-gcov
/usr/bin/arm-linux-gnueabi-gcov-dump
/usr/bin/arm-linux-gnueabi-gcov-tool
/usr/share/doc/cpp-arm-linux-gnueabi/README.Bugs
/usr/share/doc/gcc-arm-linux-gnueabi
/usr/share/man/man1/arm-linux-gnueabi-gcc-ar.1.gz
/usr/share/man/man1/arm-linux-gnueabi-gcc-nm.1.gz
/usr/share/man/man1/arm-linux-gnueabi-gcc-ranlib.1.gz
/usr/share/man/man1/arm-linux-gnueabi-gcc.1.gz
/usr/share/man/man1/arm-linux-gnueabi-gcov-dump.1.gz
/usr/share/man/man1/arm-linux-gnueabi-gcov-tool.1.gz
/usr/share/man/man1/arm-linux-gnueabi-gcov.1.gz







3. Ajouter les deux variables d’environnement ARCH et CROSS_COMPILE
de tels manière à ce qu’elle soient visible et reconnu par votre système à
chaque démarrage d’un nouveau terminal (ARCH=arm et CROSS_COMPILE=arm-linux-gnueabi-). Utiliser la commande export et
vérifier en démarrant un nouveau terminal et la commande echo $nom-variable
que ces deux variables sont reconnues.


export ARCH=arm 
export  CROSS_COMPILE=arm-linux-gnueabi-

Vérification:

echo $ARCH    => arm
echo $CROSS_COMPILE    => arm-linux-gnueabi-






4. Vérifier que vous arrivez à acceder au cross compilateur à partir de votre
bureau.




test du cross compiler sur un petit prg 'testcrosscompiling.c'
#include<stdio.h>

int main(){

printf("hello world!");

return 0;
}


arm-linux-gnueabi-gcc testcrosscompiling.c



je gènère une erreur volaiterment 


essaid@ubuntu:~/Desktop/personal/labs/lab11$ arm-linux-gnueabi-gcc testcrosscompiling.c 
testcrosscompiling.c: In function ‘main’:
testcrosscompiling.c:8:1: error: expected ‘;’ before ‘return’
 return 0;
 ^~~~~~
  					                   	le compilteur fonctionne!
   





5. Récupérer le makefile que vous avez créer lors de la partie 10 et les fichiers
sources .c et .h. Modifier le makefile en integrant la variable d’environnement
CROSS_COMPILE de tels manière à évoquer cette fois ci le cross-compilateur
et non pas le compilateur natif.

									fait


6. Lancer make clean et par la suite make. Vérifier que c’est le cross
compilateur qui est appelé.

									fait


essaid@ubuntu:~/Desktop/personal/labs/lab11$ make clean
rm *.o	My-binaire	
essaid@ubuntu:~/Desktop/personal/labs/lab11$ make
arm-linux-gnueabi-gcc -c -Wall max.c
arm-linux-gnueabi-gcc -c -Wall min.c
arm-linux-gnueabi-gcc -c -Wall var.c
arm-linux-gnueabi-gcc -c -Wall test.c
echo "Compliation en mode DISTRIBUTION RELEASE" 
Compliation en mode DISTRIBUTION RELEASE
arm-linux-gnueabi-gcc -Wall max.o min.o var.o test.o  -o My-binaire
essaid@ubuntu:~/Desktop/personal/labs/lab11$ 




7. Exécuter le binaire créer sur votre machine. Que se passe t’il. Expliquez.



l'executable ne s'execte pas 
C'est normal, car il était cré par le compilateur  cross    n'est pas compatible avec le processeur intel (host machine)

L'executable est comipilé/cré pour qu'il run sur une carte de type Processeur cible : AM335X, Cortex A8


git checkout v2018.05





























git checkout v2018.05






































































