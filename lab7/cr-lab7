
In order to know the version of the gcc on your linux machine                                        -> gcc --version
The command  -> gcc -Wall name_of_the_file_to_compile -o name_of_thre_executable_file    exmample    -> gcc -Wall main.c -o objet.o
To execute the binary file 									     -> ./objet

*******************************************************************tableaux*****************************************************
Déclaration:
		declare -a nom_tableau=(val1 val2 val3)
		nom_tab(val1 val2 val3)
		read -a nom_tab (val1 val2 val3)
Récupération de valeurs d'un tableau
		${!nom_tab([index]}

tous les éléments du tableau sont accessible par     ${nom_tab[*]}      ou        ${nom_tab[@]}

Nombre d'éléments d'un tableau      ${#nom_tableau[*]}



Concaténer deux tableaux      nom-tableau3=("${nom-d-un-tableau1[@]}" "${nom-d-un-tableau2}") 





*******************************************************************lab7********************************************************
1) fonction 

*****
max.c
*****
		 
#include "max.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void max(int t[], int n, int *max)
{
int i = 0;
int maxi = t[0];
for (i = 0; i < n; i++)
{

if (t[i] > maxi)


maxi = t[i];

}

printf("le maximum du tableau est :%d",maxi);

*max = maxi;

}

*****
max.h
*****

#ifndef max_h_
#define max_h_

#include <stdio.h>
#include <stdlib.h>




void max(int t[], int n, int *max);

#endif

*********
maxtest.c
*********

#include <stdio.h>
#include <stdlib.h>
#include "max.h"
#include <math.h>


//ceci est un programme de test pour calculer le max d'un tableau d'entiers//

int main()
{
	int maximum;
	int nbmax = 0;
	int tab[5] = {2, 5 ,7 ,2 ,9};

	for (int i = 0; i < 5 ; i++)
	{
		printf("tab[ %d ] = %d \t",i,tab[i]);

	}

	 max(tab,5,&maximum);


	return 0;
}

*********************************************************************************************************************************************************************************
2) Compilation des codes sources 

gcc -c max.c -o max.o
gcc -c max.h 
gcc -c MAXtest.c -o maxtest.o


*********************************************************************************************************************************************************************************
3)  les options -E et -S et -c



gcc -E max.c -o max.i 
gcc -S max.c -o max.s
gcc -c max.c

*********************************************************************************************************************************************************************************
4) les extensions des fichiers générés sont    .i pour gcc -E     et .s pour   gcc -S
L'option gcc -E permet de génerer un fichier d'extension .i qui est le fichier correspondant au fichier .c après l'étape de préprocesseur.
L'option gcc -S permet de génerer un fichier d'extension .s qui est le fichier correspondant au fichier .c après l'étape de compilation proprement dite.
L'option gcc -c permet de génerer un fichier d'extension .o qui est le fichier correspondant au fichier .c après l'assemblage (fichier binaire).

*********************************************************************************************************************************************************************************
5) le fichier max.c est remplacé par le binaire correspondant max.o après l'assemblage
*************************************************************************************************************************************************************************************
6) fonction min.c
*****
min.c
*****
#include "min.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void min(int t[], int n, int *min)
{

int i;
int nbmin = t[0];
for (i=0;i<n;i++)
{
if (t[i] < nbmin){

nbmin = t[i];
}
}

*min = nbmin;
printf("le minimun du tableau est :%d",nbmin);
}
**********************************************************************
*****
min.h
*****



#ifndef min_h_
#define min_h_

#include <stdio.h>
#include <stdlib.h>

 void min(int t[], int n,  int *min);


#endif

**********
 mintest.c
**********
#include "min.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main()
{
int minimum;
int tab[5] = {2, 5 ,7 ,2 ,9};


for (int i = 0; i < 5 ; i++)
{
printf("tab[ %d ] = %d \n",i,tab[i]);

}

min(tab,5,&minimum);


return 0;
}

*********************************************************************************************************************************************************************************
7)

**********
variance.c
**********

#include "var.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>





void variance(int t[], int n, float *var)
{

int s = 0;
float M = 0;
float V = 0;
float S = 0;
for (int i = 0; i< n ;i++)
{

s = s + t[i];
}

M = s/2;
for (int i= 0;i < n ; i++)
{

S = S + pow( (t[i] - M), 2 );
}


V = S/n;

*var = V;
printf("la variance est : %f", V);
}

**********
variance.h
**********

#ifndef var_h_
#define var_h_

#include <stdio.h>
#include <stdlib.h>


void variance(int t[], int n, float *var);


#endif


*********
vartest.c
*********

#include "var.h"
#include <stdio.h>
#include <stdlib.h>


int main()
{
float var;
int tab[5] = {2, 5 ,7 ,2 ,9};


for (int i = 0; i < 5 ; i++)
{
printf("tab[ %d ] = %d \n",i,tab[i]);

}

variance(tab,5,&var);


return 0;
}


8) Création de fichier test et initialisation d'un tableau de valeurs 4 9 10 11 12 15 12 9 0 30



#include "max.h"
#include "min.h"
#include "var.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{

    int minimum,maximum;
    float var;

    int tableau[10] = {4 ,9, 10, 11, 12, 15, 12, 9, 0, 30};

    max(tableau,10, &maximum);
    min(tableau,10, &minimum);
    variance(tableau,10, &var);

    
}


